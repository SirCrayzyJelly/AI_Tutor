5;Što je zahtjev i kako do njega dolazimo u inženjerstvo zahtjeva?;Zahtjev je stanje ili sposobnost koje je programski sustav treba posjedovati kako bi pomogao njegovom korisniku u rješavanju problema i/ili dostizanju ciljeva. U inženjerstvu zahtjeva različiti korisnici mogu predlagati zahtjeve, iako se najčešće za funkcionalne zahtjeve konzultira krajnji korisnik. Inženjerstvo zahtjeva je pri tome iterativan i kooperativan proces analize, dokumentiranja rezultata analize te kontinuirane provjere ispravnosti razumijevanja postignutog tim radnjama, koji rezultate opisuje u dokumentu specifikacija zahtjeva (eng. Requirement specification).;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Koje karakteristike moraju imati dobro specificirani zahtjevi?;Dobro specificirani zahtjevi moraju biti točni, potpuni (sadržavati sve potrebne zahtjeve), konzistentni (međusobno usklađeni, nema kontradikcije), koncizni (nema duplikata), prioretizirani (definirani prema važnosti), jednostavno provjerljivi, modularni (kako bi se jednostavnije mijenjali i prilagođavali) te sljedivi (prema drugim dokumentima), a ne smiju biti dvoznačni ili višeznačni.;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Je li sljedeći zahtjev dobro specificiran: „Sustav treba pohraniti sve važne korisničke informacije“. Obrazložiti odgovor.;Navedeni primjer nije dobro specificiran. Nejasan je, ne zna se koje korisničke informacije su važne, nije provjerljiv niti jednoznačan.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Je li sljedeći zahtjev dobro specificiran: „Sustav treba biti dostupan 24 sata na dan, 7 dana u tjednu.“ Obrazložiti odgovor.;Navedeni primjer je dobro specificirani zahtjev iako se ne tiče funkcionalnosti. Sve potrebne informacije su navedene, provjerljiv je, jednoznačan, razumljiv, tehnički izvediv i ne predefinira implementaciju.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Za što je sve specifikacija zahtjeva važna?;Specifikacija zahtjeva definira koje će zahtjeve programski sustav zadovoljavati, a koristi se za kao osnova pri sklapanju ugovora sa naručiteljem, kao ulaz u fazu dizajna tehničke solucije, ulaz za specifikaciju testnih slučaja, te kao važna dokumentacija za inženjere koji vrše validaciju sustava, menadžere i sl.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Navedi osnovne faze procesa inženjerstva zahtjeva i skiciraj okvir tog procesa.;U procesu inženjerstva zahtjeva možemo razlikovati tri osnovne faze: pronalaženje i analiza zahtjeva (eng. Req. Elicitation), dokumentiranje zahtjeva (eng. Req. specification) te provjera zahtjeva (eng. Req. Validation and verification).;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Što je cilj i na koje se probleme nailazi u pronalaženju zahtjeva?;Cilj pronalaženja zahtjeva je pronaći točne i potpune zahtjeve. Problemi, na koje se pri tome nailazi, su (i) da znanja iz neke domene se obično podrazumijevaju i neka neformalna znanja koja je teško dohvatiti (gdje do izražaja može doći socijalna i spoznajna sposobnost analitičara), (ii) zahtjevi su često kompleksni i postoji velik broj mogućnosti koje se može izvesti programskim proizvodom, a korisnik rijeko uspije iz prvog pokušaja sagledati sve aspekte svojih želja te (iii) teško je nositi se s razvojem okoline, tj. osigurati perspektivne zahtjeve koji će služiti i u budućnosti;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Opiši različite korisnike dokumenta specifikacije zahtjeva te što je svakome od njih važno.;Specifikacija zahtjeva je korištena od strane: a. Završnih korisnika (eng. Customers), koji bi trebali provjeriti da opisani sustav odgovara njihovim potrebama. Za korisnike, zahtjevi trebaju biti jednostavni i razumljivi, sa minimalnim žargonom, kako bi imali “čistu” komunikaciju. b. Dizajnera, koji trebaju izraditi dizajn sustava koji je opisan kroz zahtjeve. Zahtjevi moraju biti cjeloviti, jasni i što točniji kako bi se iz njih mogao razviti točan dizajn. Također, trebali bi identificirati sva ograničenja sustava kako bi ih dizajn mogao inkorporirati c. Testera, koji trebaju izraditi testne skripte. Zahtjevi trebaju biti što precizniji, kako bi se mogle definirati konkretne ulazne i izlazne vrijednosti za testne slučajeve. d. Dokumentacije, koja bi trebala sadržavati i korisničke upute proizašle iz zahtjeva. Kao i za same korisnike, dokumentacija također zahtjeva jasne zahtjeve koji prenose sve opcije sustava.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Nabroji i opiši tehnike ispitivanja korisnika koje se koriste u pronalasku i analizi zahtjeva? Koje od navedenih tehnike služe za planiranje budućeg razvoja?;Tehnike ispitivanja koje se koriste u pronalasku zahtjeva su intervju, brainstorm, upitnici (questionariee) te Delphi tehnika, tehinka analize zadataka (Task analysis) i tehnika analize zasnovane na scenarijima (Scenario based analysis).  Intervju, brainstorm i upitnici se uglavnom svode na ispitivanje korisnika i njegova očekivanja od sustava o Osnovni problemi ovakvih tehnika su da korisnici često predvide svoja ograničenja i predrasude  Delphi je iterativna tehnika gdje korisnici izmjenjuju informacije u pisanoj formi dok god se ne postigne sporazum  Tehinka analize zadataka (Task analysis) se temelji na dekompoziciji niza zadataka koje korisnici izvode u svom poslu  Tehnika analize zasnovane na scenarijima (Scenario based analysis) se ne fokusira na zadatke već na slijed zadatka o Svaki scenarij objašnjava kako se slijed zadatka izvodi o tehnika se obično koristi u objektno orijentiranim analizama i dizajn metodama (Use Case analysis) Od navedenih tehnika brainstorm tehnika se primjenjuje za planiranje budućeg razvoja, a tehnika analize zasnovana na scenarijima se može koristiti i za modeliranje trenutnog i budućeg razvoja. Tehnika prototipova (Prototyping) je tehnika koja na osnovu inicijalnog skupa zahtjeva razvija prototip, na osnovu kojeg se dalje definiraju zahtjevi budućeg razvoja, a također uključuje korisnika.;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Nabroji i opiši tehnike koje se koriste u pronalasku i analizi zahtjeva, a ne uključuju korisnika? Koje od navedenih tehnike služe za planiranje budućeg razvoja?;Tehnike za pronalazak i analizu zahtjeva, a ne uključuju korisnika, već informacije prikuplja iz znanja o domeni su: etnografija (Etnography), analiza formularima (Form analysis), opisi prirodnog jezika (Natural language descriptions), derivacija iz postojećih sustava (Derivation from an existing system) te redizajn poslovnog procesa (Business process redesign).  Etnografija je tehnika u kojoj se analizira kako grupa ljudi u stvarnosti radi, a ne kako je propisan poslovni process  Analiza formularima je tehnika u kojoj se informacije o domeni dobivaju iz raznih formulara koji se koriste u stvarnom procesu  Opisi prirodnog jezika je tehnika slična analizi formulara, samo što se informacije prikupljaju iz raznih opisnih dokumentacija primjerice operacijskih instrukcija i priručnika  Derivacija iz postojećih sustava je tehnika u kojoj se zahtjevi formuliraju tako da se analiza započne od nekog postojećeg sustava  redizajn poslovnog procesa je tehnika koja se koristi kada se želi potpuno izmijeniti i automatizirati poslovni model neke organizacije, koristi formalnu metodologiju, ne spada baš u skupinu tehnika pronalaženja i analize zahtjeva  Prototyping je tehnika koja na osnovu inicijalnog skupa zahtjeva razvija prototip, na osnovu kojeg se dalje definiraju zahtjevi;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Koji su važni zahtjevi koje imamo za dokument specifikacije zahtjeva?;Dokument specifikacije zahtjeva treba sadržavati: funkcionalnosti (što programski proizvod treba raditi), vanjska sučelja (kako programski proizvod međudjeluje s okolinom - ljudima, sistemskim hardverom, drugim hardverom i programskim proizvodima), performanse (koja je brzina, dostupnost, vrijeme odaziva, vrijeme oporavka različitih funkcija programskog proizvoda), atribute (analiza svojstva atributa kvalitete poput prenosivosti, točnosti, jednostavnosti održavanja, sigurnosti, pouzdanosti), ograničenja zbog implementacije (organičenja resursa, integritet baze podataka, operativni sustav, standardi).;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Koje poglede razlikujemo u općem opisu sustava prema normi IEEE 830?;Product perspective: Opis programskog proizvoda iz perspektive njegova djelovanja i njegove interakcije s drugim proizvodima, gdje je potrebno identificirati sve uvjete rada: o sučelja s sustavom, korisnikom, hardverom, drugim programima, komunikacijska sučelja, korištenje memorije, načini/uvjeti izvođenja, zahtjevi uslijed određene primjene  Product functions: Kratki opis svih funkcija koje pp treba izvoditi  User characteristics: Opis nužnih karakteristika korisnika za rukovanje  Constraints: Opis ograničenja u razvoju programskog proizvoda (primjerice razne regulative, ograničenja hardvera, sučelja prema drugim funkcijama, mogućnost paralelnog rada, funkcije audita i kontrole, pouzdanost, sigurnost, i druga moguća ograničenja na dizajn funkcije)  Assumptions and dependencies: Opis pretpostavki i zavisnosti izvođenja programskog proizvoda o drugim elementima s kojima je u interakciji. Za razliku od ograničenja na dizajn ovdje se navode moguća ograničenja na izvođenje programskog proizvoda  Apportioning of requirements: Lista mogućih zahtjeva u budućim revizijama dokumenta;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Kojih se smjernica trebamo pridržavati u navođenju zahtjeva i koje nam tehnike mogu pri tome pomoći?;Smjernice kojih se treba pridržavati u navoženju zahtjeva su:  zahtjevi trebaju biti DOBRO specificirani, međusobno referencirani, jedinstveni i organizirani u smislene skupine  dokumentirani zahtjevi se trebaju promatrati i iz korisniče i iz implementacijske perspektive  govorni jezik je zbog svojih nedostataka (šum, tišina, prespecificiranost, kontradiktornost, dvosmislenost, nestrukturiranost, maglovitost) poželjno zamijeniti formalnim jezikom Tehnike koje nam pomažu pri formaliziranju jezika su:  Entity-Relationship modeliranje koje modelira logičke i semantičke strukture, a sadrži entitete (grupacije zajedničkih karakteristika), atribute (karakteristike entiteta), veze (smislene poveznice između entiteta koje mogu imati pridodanu brojnost)  Konačni automati (eng. Finite state machines) koji se koriste za konačni broj stanja i mogućih prijelaza. Posebno se definirana inicijalno stanje, a dijagram prijelaza stanja koriste kružnice za prikaz stanja i usmjerene putanje za prikaz prijelaza stanja s opisom (labelom) što je pokrenulo prijelaz (stimulans);https://www.youtube.com/watch?v=jb0rpHb6gE0
6;Što je i čemu služi UML te što sadrži?;UML jedan je od prvih koraka standardizacije discipline programskog inženjerstva, a služi kao norma za kreiranje modela sustava. Model sustava je potpuni opis sustava promatran iz određene perspektive. UML sadrži standardiziranu notaciju s predloženim dijagramima koji služe za izgradnju modela programskih sustava. Sadrži specifikacije 9 različitih dijagrama koji služe kako bi se dokumentirale različite perspektive rješenja programskog proizvoda, iz različitih faza životnog ciklusa programskog proizvoda, od kojih 7 za modeliranje zahtjeva i dizajn te 2 za opis implementacije.;
6;Kako dijelimo UML dijagrame s obzirom na različite perspektive?;UML dijagrame dijelimo na 3 perspektive: funkcionalna, dinamička i statička. Funkcionalna perspektiva opisuje kako sustav treba raditi te njoj pripadaju: 1. Dijagram korištenja (eng. use case diagram) koji opisuje svojstva koja korisnik ima na raspolaganju, odnosno koja očekuje od sustava te kojim redoslijedom se ona pogone 2. Dijagram aktivnosti (eng. activity diagram) koji opisuje procese za ostvarenje svojstva sustava u obliku niza zadataka koji se moraju obaviti, uvjetnih logika i istovremenih obrada Statička perspektiva opisuje građevne elemente sustava, ali ne i način njihova međudjelovanja. Tipični predstavnici su: 1. Dijagram razreda (eng. Class diagram) koji daje pogled na sve resurse (razrede) i njihova svojstva. Gotovo uvijek se koristi za generaciju koda i reverzno inženjerstvo. 2. Dijagram objekata (eng. Object diagram) konkretizira općenitu sliku sustava prikazanu dijagramom razreda kroz konkretne instance (nalik testnim klasama) Dinamička perspektiva opisuje ponašanje sustava kojeg modeliramo tako što opisuje kako elementi iz statičkih dijagrama međusobno djeluju na neki poticaj iz okoline te njoj pripadaju: 1. Dijagrami slijeda i suradnje (eng. Sequence and collaboration diagram) koji opisuju interakcije među objektima u izvođenju programa sa ili bez vremenske perspektive 2. Dijagram karte stanja (eng. Statechart diagram) koji opisuje kako i zašto se objekti mijenjaju za vrijeme odgovora sustava na neki vanjski poticaj;
6;Čemu služi Use Case model? Opiši osnovne načine za opis zahtjeva koje model koristi.;UC model je skup dijagrama i pripadajućeg teksta kojim se opisuje način međudjelovanja sustava s korisnikom na način kakav korisnik očekuje. UC model koristi tri načina opisa zahtjeva: UC dijagram kojemu je osnovni cilj objasniti na visokom nivou veze između sustava i okoline, UC opis (eng. use case narrative) koji čini opisni dodatak dijagramu kako bi se bolje objasnila korisnička očekivanja kroz pretpostavke, preduvjete, način pokretanja UC-a, proces ili dijalog, završetak UC-a i postuvjete, te UC scenariji (eng. use case scenarios) kod kojih svaki predstavlja jednu moguću izvedbu ili logičku putanju UC-a, odnosno definira što se događa sa sustavom pod određenim uvjetima.;
6;Nacrtati primjer upotrebe <> i <> odnosa između elemenata Use Case dijagrama te obrazložiti zašto su elementi baš u tom odnosu.;Na slici je prikazan primjer sustava bankomata koji korisniku (eng. customer) nudi opciju podizanja gotovine (eng. withdraw cash) i podizanja gotovine sa zaštitom odlaska u minus (eng. protect overdraft). Kod odabira opcije podizanja gotovine automatski se pokreće prikaz ažuriranja stanja na računu (eng. update account), a kod opcije podizanja gotovine sa zaštitom postavlja se pitanje želi li se aktivirati zaštita i ako je odgovor potvrdan, pokreće se odgovarajući prikaz. Oznaka <> se koristi kada jedan UC sigurno koristi drugi UC u obavljanju svog zadatka. U ovom primjeru „Withdraw Cast“ sigurno poziva „Update Account“. Oznaka <> se koristi kada jedan UC može trebati pomoć drugog UC-a u izvođenju svog zadatka. To znači da u kodu UC-a koji treba pomoć postoji proširenje, odnosno uvjetno grananje kojim se omogućuje pozivanje drugog UC-a. U ovom primjeru „Protect Overdraft“ je opcija koja može i ne mora biti pozvana kao zaseban UC nakon odabira „Withdraw Cash with Overdraft Protection“.;
6;Nabroji i opiši sastavne elemente Use Case dijagrama?;Sastavni elementi Use Case dijagrama su: sustav, korisnik, korisnički slučaj te veze: pridruživanje, zavisnost unutar sustava koja može biti uključivanje ili proširivanje te generalizacija. Sustav se označava pravokutnikom, a važno je definirati koliko funkcionalnosti sadrži, kako međudjeluje sa okolnim sustavima, te tko su korisnici sustava. Korisnik je predstavljen grafikom čovječuljka za ljude ili pravokutnikom za druge sustave i uređaje koji imaju interakciju sa sustavom. Korisnički slučaj je označen elipsom unutar sustava te definira zahtijevano ponašanje sustava, odnosno svojstva koja su vidljiva korisnicima. Veze označene strelicama određuju komunikaciju korisnika sa sustavom (pridruživanje). Veze označene isprekidanom linijom označavaju odnos unutar sustava, odnosno korisničkih slučaja. Veza odnosa označena sa <> označava kada jedan korisnički slučaj koristi drugi korisnički slučaj u izvođenju svoga zadatka, a označena sa <> označava kada jedan korisnički slučaj koristi drugi korisnički slučaj u izvođenju svoga zadatka uz određeni uvjet. Veze označene punom linijom i praznim trokutićem definiraju generalizaciju korisničkih slučajeva kod kojeg jedan korisnički slučaj predstavlja općenitiju verziju drugoga, odnosno sadrži sva svojstva i ima potpuni pristup drugom korisničkom slučaju.;
6;Za što se koristi te koji su osnovni elementi dijagrama aktivnosti (eng. activity diagram)? ;Dijagram aktivnosti prikazuje funkcionalnost programskog sustava iz perspektive unutrašnjosti sustava. Sastavni elementi su mu: početno i krajnje stanje (označeni krugovima), aktivnosti (pravokutnikom) koje mogu biti slijedne ili paralelne, prijelazi između aktivnosti, odnosno tok aktivnosti (strelicom), račvanje i skupljanje paralelnih aktivnosti (podebljanom linijom), uvjetno grananje (rombom) te signali kada neka aktivnost šalje ili prima neku poruku (zastavicom).;
6;Koja je osnovna razlika između scenarija i dijagrama aktivnosti?;Dijagram aktivnosti prikazuje sve moguće sekvence odjednom, a scenarij je samo jedna moguća putanja/izvedba dijagrama aktivnosti.;
6;Koja je glavna prednost potpuno automatskih sustava za ispravljanje grešaka u programskom kodu?;Glavna prednost potpuno automatskih sustava je njihova brzina i smanjena potreba za ljudskim resursima, jer cijeli proces – od detekcije greške do generiranja popravka – odvija se bez intervencije programera, koristeći samo testove kao ulaz. ;
6;Koje vrste grešaka APR alati poput SemFix i SapFix mogu automatski ispraviti, i kako to čine?;"APR alati poput SemFix i SapFix mogu automatski ispraviti sintaktičke greške, kao što su izostavljene zagrade, zarezi ili pogrešno napisana imena varijabli. Oni koriste statičku analizu koda kako bi prepoznali nedostatke i umetnuli nedostajuće elemente, 
poput vitičaste zagrade u C++ funkciji.";
6;Koji su neki problemi kod automatskog ispravljanja programa? ;Ponekad popravci nisu točni, program može raditi krivo nakon ispravka ili sustav ne može prepoznati sve greške.;
