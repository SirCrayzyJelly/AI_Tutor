1;Čime se bavi disciplina programskog inženjerstva te koja su specifična svojstva programskog proizvoda koja ovu inženjersku disciplinu čine posebnom?;Programsko inženjerstvo (eng. Software Engineering) je disciplina koja se bavi primjenom sustavnog, discipliniranog i kvantificiranog pristupa u razvoju, izvođenju i održavanju programskog proizvoda. Specifična svojstva programskog proizvoda, koja programsko inženjerstvo čine fundamentalno drugačijim od ostalih inženjerskih disciplina, jesu da je on apstraktan, složen, fleksibilan, te teško mjerljivih svojstava. Za razliku od proizvoda svih drugi inženjerskih disciplina, programski proizvod nema fizička svojstva, u bilo kojoj fazi izgradnje može biti izmijenjen i prilagođen, a krajnjem korisniku može biti nedokučiv. Također, ne postoje mjerne jedinice koje su normirane i čija interpretacija može dati odgovore na razne inženjerske probleme koje se susreće prilikom izgradnje i održavanja.;https://www.youtube.com/watch?v=iIxZrYzJJ7I
1;Koja je razlika između programa, sustava čiji su oni dijelovi i programskog proizvoda?;Pojmom program označavamo isključivo programski kod koji obavlja neki specifični zadatak. Kompozicija programa u složeniju, međusobno povezanu i organiziranu strukturu koja ostvaruje namijenjenu joj funkciju predstavlja sustav. Programski proizvod (eng. software) čini skup programa povezanih u računalne sustave, ali i pripadajuće dokumentacije koji se zajedno isporučuju korisniku.;
1;Koje su osnovne teme programskog inženjerstva?;Osnovne teme programskog inženjerstva su: a) Izgradnja velikih i složenih programskih sustava b) Upravljanje složenim strukturama c) Evolucija programskog proizvoda d) Učinkovitost razvoja programskog proizvoda e) Upravljanje komunikacijom u razvoju velikih programskih sustava f) Isporuka kvalitetnog konačnog programskog proizvoda korisniku;
1;Što je proces, kako definiramo procese životnog ciklusa programskog proizvoda te od čega se oni sastoje?;Proces je skup međusobno povezanih aktivnosti kojima se ostvaruje pretvorba ulaza u izlaz. Procesi životnog ciklusa programskog proizvoda definiraju se kao skup procesa, aktivnosti i poslova koje računalni inženjeri izvode kako bi razvili i održavali programski proizvod, a sastoje se od: procesa sklapanja ugovora, procesa poduzeća, projektnih procesa i tehničkih procesa. Ulazi u procesima programskog inženjerstva mogu biti npr. zahtjevi korisnika, zadaci projektnog managementa, testni slučajevi i sl., a pripadni izlazi mogu biti specifikacija zahtjeva, hodogrami aktivnosti, uloge i podjela zadataka, te testno izvješće.;
1;Što je projekt, kakvi oni mogu biti s obzirom na doseg, a kakvi mogu biti s obzirom na tehničke procese koje izvode?;Projekt je privremena tvorevina s unaprijed definiranim početkom i završetkom, dosegom i resursima. S obzirom na doseg oni mogu biti:  korektivni projekti (otklanjanje pogrešaka u postojećem sustavu),  adaptivni projekti (izmjene uslijed promjene operacijskog sustava, baza podataka, zakonskih odredbi i sl.),  unapređujući, aditivni projekti (dodavanje nove funkcionalnosti),  projekti ponovnog inženjerstva (npr. unutarnje izmjene u arhitekturi sustava kako bi se olakšalo dodavanje novih modula ili održavanje),  sasvim novi, integrativni projekti (oblikovanje novog okruženja iz postojećih programskih komponenata i cjelina). S obzirom na tehničke procese koje izvode, projekti mogu biti: razvojni projekti (eng. development project), projekti integracije i verifikacije (eng. integration & verification project), i projekti održavanja (eng. maintenance project).;
1;Koje su osnovne faze u modelima procesa razvoja programskog proizvoda i od čega se sastoje?;Osnovne faze u modelima procesa razvoja programskog proizvoda prema ISO normama su: inženjerstvo zahtjeva, dizajn, implementacija i testiranje. a) Inženjerstvo zahtjeva je prvi korak svakog modela razvoja, a osnovni cilj mu je opis problema kojeg se treba riješiti i definicija zahtjeva u skladu s zadanim problemom i okolinom kojoj je sustav namijenjen (hardver, drugi software i/ili korisnici). U ovoj fazi provodi se studija izvedivosti projekta, odrede se moguća rješenja te se diskutiraju njihovi prednosti i nedostaci. Osnovni dokument u kojem se sažimaju rezultati ove faze naziva se specifikacija zahtjeva. b) Dizajn podrazumijeva razvoj modela za cijeli sustav kroz (i) dekompoziciju problema na manje smislene programske cjeline (module ili komponente), (ii) prijenos specifikacije zahtjeva sustava na specifikaciju zahtjeva funkcija definiranih programskih cjelina i (iii) definiciju sučelja među programskim cjelinama. Rezultati ove faze sažimaju se u dokumentu tehnička specifikacija. c) Implementacija je faza u kojoj se radi programiranje. Kod velikih programa samom programiranju obično prethodi i ispisivanje pseudokoda. Osnovni cilj programiranja je da se napravi čitljiv, jednostavan za nadogradnju i održavanje, dobro dokumentiran i točan program. Rezultat ove faze je program kojeg se može izvoditi. d) Faza testiranja u novijim modelima razvoja sve je više isprepletena s fazom implementacije. Planiranje testnih aktivnosti započinje s fazom specifikacije zahtjeva. Testiranjem se provjerava u kojoj su mjeri implementirani zahtjevi te se traže neispravnosti kako u kodu, tako i u projektnoj dokumentaciji. Osnovna motivacija za kontinuirano provođenje testnih aktivnosti je da je svaku ranije otkrivenu neispravnost jeftinije ukloniti, tj. ispraviti.;
1;Koja je osnovna svrha održavanja programskog proizvoda?;Cilj faze održavanja je osigurati neometano izvođenje programskog proizvoda kod korisnika, a osnovna svrha je: otklanjanje svih neispravnosti otkrivenih nakon isporuke, prilagođavanje sustava promijenjenim zahtjevima ili uvođenje poboljšanja. Održavanje programskih sustava ujedno predstavlja najzahtjevniju aktivnost koja slijedi nakon isporuke, odnosno implementacije software-a;
1;Koja je konceptualna razlika između procesa i modela koji se koriste u razvoju software-a?;Proces je skup međusobno povezanih aktivnosti kojima se ostvaruje pretvorba ulaza u izlaz, dok model predstavlja konkretno definirane korake koje te aktivnosti podrazumijevaju i dinamiku njihova izvođenja. Procesi čije modele treba definirati u okviru životnog ciklusa programskog proizvoda su od razvoja, izvođenja i održavanja projekta, definiranja zahtjeva pa sve do povlačenja programskog proizvoda iz uporabe.;
1;Kako SEIS doprinosi razvoju društvene odgovornosti u kontekstu razvoja softverskih rješenja?;SEIS potiče društvenu odgovornost u razvoju softverskih rješenja istražujući njihov tehnološki i društveni utjecaj. Fokusira se na inkluzivnost, etiku i stvarne potrebe zajednice, razvijajući sustave koji povezuju ljude, olakšavaju suradnju i poboljšavaju digitalnu dostupnost.;
1;Zašto se Ada Lovelace smatra prvom programerkom u povijesti i jesu li njezine ideje bile realizirane?;Ada Lovelace razvila je prvi algoritam namijenjen izvođenju na stroju. Ne, strojevi koji su trebali raditi na principu njezinih algoritama nikada nisu bili u potpunosti realizirani nego su kasnije poslužili kao temelj za razvoj modernih računala i softvera.;https://en.wikipedia.org/wiki/Ada_Lovelace
1;Kako primjena novih tehnologija poput blockchaina, IoT-a i velikih podataka oblikuje budućnost softverskog inženjeringa i informacijskih sustava (SEIS)?;Blockchain: Blockchain omogućava sigurno i transparentno pohranjivanje podataka, smanjuje potrebu za posrednicima, što povećava efikasnost i smanjuje troškove u raznim industrijama (npr. financijama, zdravstvu). IoT (Internet stvari): IoT uređaji omogućuju prikupljanje podataka u stvarnom vremenu i automatsko donošenje odluka u industrijama poput zdravstva, pametnih gradova i poljoprivrede, čime se poboljšava efikasnost i kvalitetu usluga. Veliki podaci (Big Data): Analizom velikih podataka, tvrtke i institucije mogu donositi bolje odluke, personalizirati usluge i optimizirati poslovne procese, što doprinosi povećanju konkurentnosti i inovacija.;https://en.wikipedia.org/wiki/Blockchain, https://en.wikipedia.org/wiki/Internet_of_things
1;Koje su dvije glavne kategorije radova koje NIER track prihvaća na ICSE konferenciji i što svaka od njih treba sadržavati?;• Forward-looking ideas (Vizionarske ideje) – radovi koji predlažu nove smjerove ili tehnike u softverskom inženjerstvu, koji možda nemaju kompletne eksperimentalne dokaze, ali moraju biti jasno argumentirani, potkrijepljeni znanstvenom logikom i sadržavati plan za daljnje istraživanje. • Thought-provoking reflections (Provokativne refleksije) – radovi koji donose neočekivane rezultate ili perspektive koje izazivaju postojeće paradigme u softverskom inženjerstvu, potkrijepljeni preliminarnim podacima ili analizama.;
1;Što je XDEAD, koje metode koristi za detekciju pogrešno uklonjenog aktivnog koda (zbog grešaka u eliminaciji mrtvog koda - DCE), i koje je dvije specifične greške otkrio?;• XDEAD je alat za otkrivanje pogrešaka u eliminaciji mrtvog koda (DCE). • Koristi diferencijalno testiranje, statičku binarnu analizu i dinamičko simboličko izvođenje za otkrivanje grešaka. • Konkretno, otkrio je dvije ozbiljne greške u LLVM kompilatoru koje su rezultirale uklanjanjem aktivnog, potrebnog koda tijekom optimizacije.;
1;Koji su glavni izazovi korištenja blockchain tehnologije za koordinaciju robotskih misija u svemiru, i koja četiri rješenja istraživači predlažu za prevladavanje tih izazova?;• Glavni izazovi uključuju veliku potrošnju energije, sporost obrade transakcija i preveliku transparentnost podataka. • Predložena rješenja uključuju: 1. Prilagođene verzije blockchaina (privatne ili hibridne mreže koje štede energiju i povećavaju brzinu). 2. Pametne ugovore (automatizacija pregovora između robota). 3. Korištenje tokena (fungibilnih ili NFT-ova) za razmjenu informacija ili resursa. 4. Dodatna tehnička optimizacija i razvoj učinkovitijih sustava obrade podataka specifično prilagođenih za uvjete u svemiru.;
2;Što uključuje planiranje projekata te koji su važni zahtjevi koje pri tome treba zadovoljiti?;Planiranje projekata uključuje:  Određivanje zadataka i njihovih međusobnih ovisnosti o Svaki zadatak bi trebao imati jasno definiranu i provjerljivu isporuku i vremenski rok  Određivanje poretka obavljanja zadataka i potrebnih resursa o Zadaci bi se trebali poredati tako da se izvedu u što kraće vrijeme, bez praznog hoda  Predviđanje trajanja projekta o Dobrim planiranjem zadataka i količine vremena koja je za njih potrebna  Predviđanje troškova o Ovisi o uspješnosti procjene veličine i/ili složenosti projekta  Mehanizmi praćenja i kontrole kvalitete Trokut zahtjeva, često proturječnih u razvoju programskog proizvod, koje treba pokriti planiranjem su: trajanje, troškovi i kvaliteta. Nemoguće je postići brz, jeftin i kvalitetan projekt, ali na uštrb jednog zahtjeva, moguće je postići dobre rezultate u druga dva (npr. brz i jeftin projekt vrlo vjerojatno neće biti naročito kvalitetno izveden).;https://blog.pragmaticengineer.com/how-to-lead-a-project-in-software-development/
2;Čemu služi, što sadrži i koja su pravila za strukturu podjele posla (eng. Work breakdown structure)?;Struktura podjele posla (eng. Work breakdown structure, WBS) je tehnika za podjelu posla u manje zadatke što je neophodno prilikom planiranje složenijeg projekta. WBS uključuje definiciju isporuka (eng. deliverables) i ključnih datuma (eng. milestones) u formi WBS stabla koje sadrži:  Poslove složene po razinama  Najviše razine su obično veliki poslovi zajednički svim projektima (npr. specifikacija zahtjeva, dizajn, verifikacija)  Poslove više razine se granaju na više poslova niže razine  Poslove najniže razine zovu se zadaci (listovi stabla) Pravila za konstrukciju WBS stabla su:  WBS mora imati strukturu stabla, dakle, bez petlji i ciklusa (iterativni poslovi se definiraju procesom, a ne u WBS-u)  Opisi zadataka moraju biti razumljivi i nedvosmisleni  Svaki zadatak mora imati nedvosmislen kriterij za provjeru da je izvršen (najčešće je to isporuka - deliverable)  Sve isporuke moraju biti identificirane s WBS-om, tj. svaka isporuka potrebna u projektu mora biti proizvod nekog od zadataka  Uspješno izvršenje svih poslova neke razine mora rezultirati uspješnim izvršenjem posla na razini iznad;https://www.youtube.com/watch?v=BVcd9uy9kuQ
2;Što je, od čega se sastoji i čemu služi program evaluation and review technique?;Program Evaluation and Review Technique (PERT) je tehnika za izradu grafa koji prikazuje međusobne ovisnosti i trajanja svih zadataka u nekom poslu. Vrhovi (čvorovi) grafa predstavljaju zadatke, oznake vrhova prikazuju trajanja zadataka, a bridovi (veze) grafa povezuju zadatak sa svim zadacima koji o njemu ovise (strelica pokazuje u tom smjeru). Pomoću grafa se određuju vrijeme izvršavanja čitavog posla, kritični put, te dozvoljena kašnjenja zadataka;https://www.youtube.com/watch?v=i160aaBX7mE
2;Što je kritični put kod program evaluation and review technique-a?;- Kritični put je niz ovisnih zadataka čije izvršenje traje koliko i minimalno moguće trajanje čitavog posla - Kritični put (ovisnosti u njemu) je razlog zbog kojeg čak ni korištenjem više resursa nije moguće ubrzati završetak posla - Kritični put ne mora biti jedinstven, ali svi mogući kritični putovi jednako traju;
2;Objasni metodologiju CAPIR metode za poboljšanje preporuka API-ja u procesu generiranja koda.;Prvi korak -> raščlaniti zadatak gdje se LLM treba koristiti na manji niz podzadataka. Drugi korak -> pretraživanje API-ja gdje CAPIR pretražuje dokumentaciju kako bi pronašao relevantne API-je za svaki podzadatak. Treći korak -> rangiranje API-ja, CAPIR ocjenjuje i filtrira pronađene API-je kako bi preporučio samo one najrelevantnije za zadani podzadatak.;
2;Kvalitetna dokumentacija ASAT pravila trebala bi sadržavati koja tri ključna elementa i na što bi oni trebali odgovarati?;Što? - Objašnjenje što aktivira određeno pravilo, odnosno koji problem u kodu se detektira. Zašto? - Razlog zašto je određeno pravilo važno te kakve posljedice može imati ako se ne poštuje. Kako ispraviti? - Konkretne smjernice ili primjeri kako riješiti problem koji je alat detektirao.;
2;Što je Mask-Catcher i kako glasi njegova metodologija?;Mask-Catcher je automatizirani sustav koji koristi mehanizam filtriranja za detekciju maskiranih aplikacija. Prvi korak -> razvrstavanje aplikacija prema nesuglasju između opisa aplikacije i recenzija korisnika. Drugi korak -> stvaranje mreže preporuka među aplikacijama pomoću međusobnih preporuka. Treći korak -> analiza sličnosti za otkrivanje aplikacija koje koriste skrivene funkcionalnosti.;https://www.ittc.ku.edu/~bluo/pubs/zhao24icpc.pdf
3;Što je menadžment u programskom inženjerstvu prema IEEE i koji su stvarni problemi?;Menadžment u programskom inženjerstvu je primjena aktivnosti poput planiranja, nadzora i kontrole s ciljem sustavnog razvoja softvera. U praksi se susreću problemi poput postavljanja prioriteta, rada s nejasnim ulazima, koordinacije timova, kontrole apstraktnih proizvoda i komunikacije.;https://sceweb.sce.uhcl.edu/helm/SWEBOK_IEEE/data/swebok_chapter_08.pdf
3;Koje su važne karakteristike koje definiraju projekt?;Projekt je vremenski ograničen s definiranim početkom i krajem, ograničenim resursima i nizom aktivnosti koje se izvode logičkim redoslijedom kako bi se stvorio jedinstveni rezultat.;https://pressbooks.ulib.csuohio.edu/project-management-navigating-the-complexity/chapter/1-2-project-characteristics/
3;Koja je razlika između linijske i projektne odgovornosti?;Linijska odgovornost se odnosi na strateške zadatke unutar organizacije (npr. upravljanje resursima), dok se projektna odgovornost odnosi na ispunjenje ciljeva određenog projekta (npr. isporuka u roku i budžetu).;https://www.sprintzeal.com/blog/project-characteristics
3;Koje procese upravljanja uključuje životni ciklus projekta?;Uključuje procese: inicijacije (studije izvedivosti), planiranja (razrada faza), izvođenja i kontrole, te završne procese poput revizije i zaključenja projekta.;https://biz.libretexts.org/Courses/Western_Technical_College/Operations_Management_%28Hammond%29/05%3A_Project_Management/5.03%3A_Project_Characteristics_and_Constraints
3;Koja su ključna znanja za upravljanje softverskim projektima?;Potrebna znanja uključuju: modele procesa, upravljanje timovima, kvalitetom, rizicima, komunikacijom, troškovima, vremenom i konfiguracijama, kao i planiranje i nadzor.;https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge
3;Što je projektni plan i kada se izrađuje?;Projektni plan je temeljni dokument koji opisuje kako ?e se projekt voditi i nadzirati. Prva verzija se izrađuje na početku, već u fazi zahtjeva, i s vremenom se ažurira.;https://www.sprintzeal.com/blog/project-characteristics
3;Koja su osnovna poglavlja projektnog plana i što sadrže?;"1. Organizacija projekta: model procesa, projektna struktura, granice, odgovornosti. 2. Proces upravljanja: rizici, kontrolni mehanizmi, izvještavanje, planiranje ljudskih resursa. 3. Tehnički procesi: alati, metode, dokumentacija, osiguranje kvalitete. 4. Vremenski tijek: radni paketi, rokovi, resursi, budžet.";https://www.sprintzeal.com/blog/project-characteristics
4;Koja je razlika između modela procesa i procesa životnog ciklusa?;"Proces životnog ciklusa obuhvaća sve aktivnosti koje ljudi izvode kako bi razvili, održavali i povukli programski proizvod – uključuje sklapanje ugovora, tehničke i projektne procese. Model životnog ciklusa je formalni okvir koji definira redoslijed i dinamiku tih aktivnosti, kao i njihovu međusobnu povezanost, te pruža strukturu od početka do kraja razvoja softvera. Drugim riječima, proces opisuje ""što se radi"", a model ""kako i kada"".";"https://www.fer.hr/_download/repository/PP10.pdf?utm_source=chatgpt.com"
4;Koje su osnovne faze općeg modela životnog ciklusa softvera?;"Faze su: 1. Inženjering zahtjeva – korisnički zahtjevi se formaliziraju u tehničke specifikacije. 2. Tehnički dizajn – tehnički zahtjevi se prevode u dizajnersku dokumentaciju. 3. Implementacija – koristi dizajn za kodiranje funkcionalnog proizvoda. 4. Testiranje – provjerava radi li implementacija ispravno. Svaka faza ima jasne ulaze i izlaze, a isporuke jedne faze su potrebne za sljedeću.";"https://www.guru99.com/hr/software-development-life-cycle-tutorial.html?utm_source=chatgpt.com"
4;Koje su osnovne karakteristike vodopadnog modela razvoja?;"Vodopadni model je linearan, gdje se svaka faza (od analize do testiranja) završava prije nego što počne sljedeća. Karakteristike: Faze su strogo odvojene i ne preklapaju se. Pogodan za projekte s dobro definiranim zahtjevima. Prednosti: Jednostavnost u planiranju i provedbi. Jasna struktura i dokumentacija. Nedostaci: Nema povratka unatrag ako se pojave problemi. Promjene zahtjeva teško se integriraju. Korisnik dobiva gotov proizvod tek na kraju, što smanjuje povjerenje.";"https://spvp.zesoi.fer.hr/seminari/2007/seminari/Ivo%20Veseli%20-%20Proces%20razvoja%20softvera.pdf?utm_source=chatgpt.com"
4;Koje su prednosti i nedostaci prototyping modela razvoja i kada se primjenjuje?;"Prototyping model uključuje izradu nedovršenog (ali vizualnog) rješenja kako bi se dobila povratna informacija od korisnika. Prednosti: Bolje razumijevanje korisničkih zahtjeva. Rano otkrivanje problema. Manje nepotrebnih funkcionalnosti, jednostavniji sustav. Nedostaci: Može biti vremenski zahtjevno. Često se preskaču standardi i kvaliteta dizajna. Otežano održavanje zbog tehničkog duga. Primjena: Kad nisu jasni zahtjevi na početku, posebno korisničko sučelje.";"https://repository.inf.uniri.hr/islandora/object/infri%3A468/datastream/PDF/download?utm_source=chatgpt.com"
4;Koje su osnovne karakteristike inkrementalnog modela razvoja?;"Softver se razvija u dijelovima (inkrementima), svaki od njih djeluje samostalno. Karakteristike: Iterativan razvoj s djelomičnim isporukama. Korisnik može rano koristiti dijelove sustava. Prednosti: Rani povrat informacija. Fleksibilniji prema promjenama. Veće povjerenje korisnika. Nedostaci: Kompleksno planiranje. Potrebni iskusni stručnjaci. Teškoća u integraciji svih dijelova kasnije.";"https://www.guru99.com/hr/what-is-incremental-model-in-sdlc-advantages-disadvantages.html?utm_source=chatgpt.com"
4;Koje su osnovne karakteristike spiralnog modela razvoja?;"Spiralni model kombinira iteracije i analizu rizika kroz više ciklusa razvoja. Karakteristike: Svaka iteracija uključuje komunikaciju, planiranje, analizu rizika, dizajn, izradu i evaluaciju. Fokus na analizu i minimizaciju rizika. Prednosti: Visoka fleksibilnost. Aktivna uključenost korisnika. Rano uočavanje problema. Nedostaci: Složena struktura. Teškoća u upravljanju. Nije idealan za velike sustave s dugim razvojem.";"https://zir.nsk.hr/islandora/object/unipu%3A6218/datastream/PDF/download?utm_source=chatgpt.com"
4;Što je osnovna ideja modela zasnovanog na ponovnoj upotrebi i zašto nije široko zastupljen?;"Ideja je korištenje gotovih komponenti (""lego pristup"") – analiza, prilagodba i integracija postojećih modula. Problem: Nedostatak iskustva i nedovoljna baza kvalitetnih komponenti u industriji.";"https://jusufspahic.files.wordpress.com/2015/11/dizajn-aplikativnog-softvera-skripta-za-kolokvijum.pdf?utm_source=chatgpt.com"
4;Koje su osnovne karakteristike rapidnog modela razvoja?;"Faze razvoja se preklapaju (npr. dizajn i implementacija). Inkrementalni razvoj s čestim verzijama (svakih 2–3 tjedna). Minimalna dokumentacija. Fokus na brzu isporuku i fleksibilnost. Aktivna uključenost korisnika. Mali timovi, neformalna komunikacija.";"https://repozitorij.veleri.hr/islandora/object/veleri%3A2512/datastream/PDF/view?utm_source=chatgpt.com"
4;Usporedi agilne metode razvoja: Scrum, Kanban i Scrumban.;"Scrum: Fiksni vremenski sprintovi (obično 2 tjedna). Jasno definirane uloge (scrum master, product owner). Planiranje, dnevni sastanci, retrospektive. Promjene nisu dozvoljene unutar sprinta. Kanban: Vizualna ploča s karticama (To Do, Doing, Done). Bez vremenskih ograničenja. Promjene se mogu unositi u hodu. Fokus na optimizaciju tijeka rada. Scrumban: Kombinira najbolje iz oba svijeta. Sprintovi poput Scruma + fleksibilnost Kanbana. Ograničen broj zadataka u tijeku (WIP limit). Koristi vizualizaciju radnog procesa.";"https://gorankrmpotic.eu/agile-agilno-upravljanje-scrum-kanban?utm_source=chatgpt.com"
5;Što je zahtjev i kako do njega dolazimo u inženjerstvo zahtjeva?;Zahtjev je stanje ili sposobnost koje je programski sustav treba posjedovati kako bi pomogao njegovom korisniku u rješavanju problema i/ili dostizanju ciljeva. U inženjerstvu zahtjeva različiti korisnici mogu predlagati zahtjeve, iako se najčešće za funkcionalne zahtjeve konzultira krajnji korisnik. Inženjerstvo zahtjeva je pri tome iterativan i kooperativan proces analize, dokumentiranja rezultata analize te kontinuirane provjere ispravnosti razumijevanja postignutog tim radnjama, koji rezultate opisuje u dokumentu specifikacija zahtjeva (eng. Requirement specification).;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Koje karakteristike moraju imati dobro specificirani zahtjevi?;Dobro specificirani zahtjevi moraju biti točni, potpuni (sadržavati sve potrebne zahtjeve), konzistentni (međusobno usklađeni, nema kontradikcije), koncizni (nema duplikata), prioretizirani (definirani prema važnosti), jednostavno provjerljivi, modularni (kako bi se jednostavnije mijenjali i prilagođavali) te sljedivi (prema drugim dokumentima), a ne smiju biti dvoznačni ili višeznačni.;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Je li sljedeći zahtjev dobro specificiran: „Sustav treba pohraniti sve važne korisničke informacije“. Obrazložiti odgovor.;Navedeni primjer nije dobro specificiran. Nejasan je, ne zna se koje korisničke informacije su važne, nije provjerljiv niti jednoznačan.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Je li sljedeći zahtjev dobro specificiran: „Sustav treba biti dostupan 24 sata na dan, 7 dana u tjednu.“ Obrazložiti odgovor.;Navedeni primjer je dobro specificirani zahtjev iako se ne tiče funkcionalnosti. Sve potrebne informacije su navedene, provjerljiv je, jednoznačan, razumljiv, tehnički izvediv i ne predefinira implementaciju.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Za što je sve specifikacija zahtjeva važna?;Specifikacija zahtjeva definira koje će zahtjeve programski sustav zadovoljavati, a koristi se za kao osnova pri sklapanju ugovora sa naručiteljem, kao ulaz u fazu dizajna tehničke solucije, ulaz za specifikaciju testnih slučaja, te kao važna dokumentacija za inženjere koji vrše validaciju sustava, menadžere i sl.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Navedi osnovne faze procesa inženjerstva zahtjeva i skiciraj okvir tog procesa.;U procesu inženjerstva zahtjeva možemo razlikovati tri osnovne faze: pronalaženje i analiza zahtjeva (eng. Req. Elicitation), dokumentiranje zahtjeva (eng. Req. specification) te provjera zahtjeva (eng. Req. Validation and verification).;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Što je cilj i na koje se probleme nailazi u pronalaženju zahtjeva?;Cilj pronalaženja zahtjeva je pronaći točne i potpune zahtjeve. Problemi, na koje se pri tome nailazi, su (i) da znanja iz neke domene se obično podrazumijevaju i neka neformalna znanja koja je teško dohvatiti (gdje do izražaja može doći socijalna i spoznajna sposobnost analitičara), (ii) zahtjevi su često kompleksni i postoji velik broj mogućnosti koje se može izvesti programskim proizvodom, a korisnik rijeko uspije iz prvog pokušaja sagledati sve aspekte svojih želja te (iii) teško je nositi se s razvojem okoline, tj. osigurati perspektivne zahtjeve koji će služiti i u budućnosti;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Opiši različite korisnike dokumenta specifikacije zahtjeva te što je svakome od njih važno.;Specifikacija zahtjeva je korištena od strane: a. Završnih korisnika (eng. Customers), koji bi trebali provjeriti da opisani sustav odgovara njihovim potrebama. Za korisnike, zahtjevi trebaju biti jednostavni i razumljivi, sa minimalnim žargonom, kako bi imali “čistu” komunikaciju. b. Dizajnera, koji trebaju izraditi dizajn sustava koji je opisan kroz zahtjeve. Zahtjevi moraju biti cjeloviti, jasni i što točniji kako bi se iz njih mogao razviti točan dizajn. Također, trebali bi identificirati sva ograničenja sustava kako bi ih dizajn mogao inkorporirati c. Testera, koji trebaju izraditi testne skripte. Zahtjevi trebaju biti što precizniji, kako bi se mogle definirati konkretne ulazne i izlazne vrijednosti za testne slučajeve. d. Dokumentacije, koja bi trebala sadržavati i korisničke upute proizašle iz zahtjeva. Kao i za same korisnike, dokumentacija također zahtjeva jasne zahtjeve koji prenose sve opcije sustava.;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Nabroji i opiši tehnike ispitivanja korisnika koje se koriste u pronalasku i analizi zahtjeva? Koje od navedenih tehnike služe za planiranje budućeg razvoja?;Tehnike ispitivanja koje se koriste u pronalasku zahtjeva su intervju, brainstorm, upitnici (questionariee) te Delphi tehnika, tehinka analize zadataka (Task analysis) i tehnika analize zasnovane na scenarijima (Scenario based analysis).  Intervju, brainstorm i upitnici se uglavnom svode na ispitivanje korisnika i njegova očekivanja od sustava o Osnovni problemi ovakvih tehnika su da korisnici često predvide svoja ograničenja i predrasude  Delphi je iterativna tehnika gdje korisnici izmjenjuju informacije u pisanoj formi dok god se ne postigne sporazum  Tehinka analize zadataka (Task analysis) se temelji na dekompoziciji niza zadataka koje korisnici izvode u svom poslu  Tehnika analize zasnovane na scenarijima (Scenario based analysis) se ne fokusira na zadatke već na slijed zadatka o Svaki scenarij objašnjava kako se slijed zadatka izvodi o tehnika se obično koristi u objektno orijentiranim analizama i dizajn metodama (Use Case analysis) Od navedenih tehnika brainstorm tehnika se primjenjuje za planiranje budućeg razvoja, a tehnika analize zasnovana na scenarijima se može koristiti i za modeliranje trenutnog i budućeg razvoja. Tehnika prototipova (Prototyping) je tehnika koja na osnovu inicijalnog skupa zahtjeva razvija prototip, na osnovu kojeg se dalje definiraju zahtjevi budućeg razvoja, a također uključuje korisnika.;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Nabroji i opiši tehnike koje se koriste u pronalasku i analizi zahtjeva, a ne uključuju korisnika? Koje od navedenih tehnike služe za planiranje budućeg razvoja?;Tehnike za pronalazak i analizu zahtjeva, a ne uključuju korisnika, već informacije prikuplja iz znanja o domeni su: etnografija (Etnography), analiza formularima (Form analysis), opisi prirodnog jezika (Natural language descriptions), derivacija iz postojećih sustava (Derivation from an existing system) te redizajn poslovnog procesa (Business process redesign).  Etnografija je tehnika u kojoj se analizira kako grupa ljudi u stvarnosti radi, a ne kako je propisan poslovni process  Analiza formularima je tehnika u kojoj se informacije o domeni dobivaju iz raznih formulara koji se koriste u stvarnom procesu  Opisi prirodnog jezika je tehnika slična analizi formulara, samo što se informacije prikupljaju iz raznih opisnih dokumentacija primjerice operacijskih instrukcija i priručnika  Derivacija iz postojećih sustava je tehnika u kojoj se zahtjevi formuliraju tako da se analiza započne od nekog postojećeg sustava  redizajn poslovnog procesa je tehnika koja se koristi kada se želi potpuno izmijeniti i automatizirati poslovni model neke organizacije, koristi formalnu metodologiju, ne spada baš u skupinu tehnika pronalaženja i analize zahtjeva  Prototyping je tehnika koja na osnovu inicijalnog skupa zahtjeva razvija prototip, na osnovu kojeg se dalje definiraju zahtjevi;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Koji su važni zahtjevi koje imamo za dokument specifikacije zahtjeva?;Dokument specifikacije zahtjeva treba sadržavati: funkcionalnosti (što programski proizvod treba raditi), vanjska sučelja (kako programski proizvod međudjeluje s okolinom - ljudima, sistemskim hardverom, drugim hardverom i programskim proizvodima), performanse (koja je brzina, dostupnost, vrijeme odaziva, vrijeme oporavka različitih funkcija programskog proizvoda), atribute (analiza svojstva atributa kvalitete poput prenosivosti, točnosti, jednostavnosti održavanja, sigurnosti, pouzdanosti), ograničenja zbog implementacije (organičenja resursa, integritet baze podataka, operativni sustav, standardi).;https://www.youtube.com/watch?v=Z9mKgHbfPpE
5;Koje poglede razlikujemo u općem opisu sustava prema normi IEEE 830?;Product perspective: Opis programskog proizvoda iz perspektive njegova djelovanja i njegove interakcije s drugim proizvodima, gdje je potrebno identificirati sve uvjete rada: o sučelja s sustavom, korisnikom, hardverom, drugim programima, komunikacijska sučelja, korištenje memorije, načini/uvjeti izvođenja, zahtjevi uslijed određene primjene  Product functions: Kratki opis svih funkcija koje pp treba izvoditi  User characteristics: Opis nužnih karakteristika korisnika za rukovanje  Constraints: Opis ograničenja u razvoju programskog proizvoda (primjerice razne regulative, ograničenja hardvera, sučelja prema drugim funkcijama, mogućnost paralelnog rada, funkcije audita i kontrole, pouzdanost, sigurnost, i druga moguća ograničenja na dizajn funkcije)  Assumptions and dependencies: Opis pretpostavki i zavisnosti izvođenja programskog proizvoda o drugim elementima s kojima je u interakciji. Za razliku od ograničenja na dizajn ovdje se navode moguća ograničenja na izvođenje programskog proizvoda  Apportioning of requirements: Lista mogućih zahtjeva u budućim revizijama dokumenta;https://www.youtube.com/watch?v=jb0rpHb6gE0
5;Kojih se smjernica trebamo pridržavati u navođenju zahtjeva i koje nam tehnike mogu pri tome pomoći?;Smjernice kojih se treba pridržavati u navoženju zahtjeva su:  zahtjevi trebaju biti DOBRO specificirani, međusobno referencirani, jedinstveni i organizirani u smislene skupine  dokumentirani zahtjevi se trebaju promatrati i iz korisniče i iz implementacijske perspektive  govorni jezik je zbog svojih nedostataka (šum, tišina, prespecificiranost, kontradiktornost, dvosmislenost, nestrukturiranost, maglovitost) poželjno zamijeniti formalnim jezikom Tehnike koje nam pomažu pri formaliziranju jezika su:  Entity-Relationship modeliranje koje modelira logičke i semantičke strukture, a sadrži entitete (grupacije zajedničkih karakteristika), atribute (karakteristike entiteta), veze (smislene poveznice između entiteta koje mogu imati pridodanu brojnost)  Konačni automati (eng. Finite state machines) koji se koriste za konačni broj stanja i mogućih prijelaza. Posebno se definirana inicijalno stanje, a dijagram prijelaza stanja koriste kružnice za prikaz stanja i usmjerene putanje za prikaz prijelaza stanja s opisom (labelom) što je pokrenulo prijelaz (stimulans);https://www.youtube.com/watch?v=jb0rpHb6gE0
6;Što je i čemu služi UML te što sadrži?;UML jedan je od prvih koraka standardizacije discipline programskog inženjerstva, a služi kao norma za kreiranje modela sustava. Model sustava je potpuni opis sustava promatran iz određene perspektive. UML sadrži standardiziranu notaciju s predloženim dijagramima koji služe za izgradnju modela programskih sustava. Sadrži specifikacije 9 različitih dijagrama koji služe kako bi se dokumentirale različite perspektive rješenja programskog proizvoda, iz različitih faza životnog ciklusa programskog proizvoda, od kojih 7 za modeliranje zahtjeva i dizajn te 2 za opis implementacije.;
6;Kako dijelimo UML dijagrame s obzirom na različite perspektive?;UML dijagrame dijelimo na 3 perspektive: funkcionalna, dinamička i statička. Funkcionalna perspektiva opisuje kako sustav treba raditi te njoj pripadaju: 1. Dijagram korištenja (eng. use case diagram) koji opisuje svojstva koja korisnik ima na raspolaganju, odnosno koja očekuje od sustava te kojim redoslijedom se ona pogone 2. Dijagram aktivnosti (eng. activity diagram) koji opisuje procese za ostvarenje svojstva sustava u obliku niza zadataka koji se moraju obaviti, uvjetnih logika i istovremenih obrada Statička perspektiva opisuje građevne elemente sustava, ali ne i način njihova međudjelovanja. Tipični predstavnici su: 1. Dijagram razreda (eng. Class diagram) koji daje pogled na sve resurse (razrede) i njihova svojstva. Gotovo uvijek se koristi za generaciju koda i reverzno inženjerstvo. 2. Dijagram objekata (eng. Object diagram) konkretizira općenitu sliku sustava prikazanu dijagramom razreda kroz konkretne instance (nalik testnim klasama) Dinamička perspektiva opisuje ponašanje sustava kojeg modeliramo tako što opisuje kako elementi iz statičkih dijagrama međusobno djeluju na neki poticaj iz okoline te njoj pripadaju: 1. Dijagrami slijeda i suradnje (eng. Sequence and collaboration diagram) koji opisuju interakcije među objektima u izvođenju programa sa ili bez vremenske perspektive 2. Dijagram karte stanja (eng. Statechart diagram) koji opisuje kako i zašto se objekti mijenjaju za vrijeme odgovora sustava na neki vanjski poticaj;
6;Čemu služi Use Case model? Opiši osnovne načine za opis zahtjeva koje model koristi.;UC model je skup dijagrama i pripadajućeg teksta kojim se opisuje način međudjelovanja sustava s korisnikom na način kakav korisnik očekuje. UC model koristi tri načina opisa zahtjeva: UC dijagram kojemu je osnovni cilj objasniti na visokom nivou veze između sustava i okoline, UC opis (eng. use case narrative) koji čini opisni dodatak dijagramu kako bi se bolje objasnila korisnička očekivanja kroz pretpostavke, preduvjete, način pokretanja UC-a, proces ili dijalog, završetak UC-a i postuvjete, te UC scenariji (eng. use case scenarios) kod kojih svaki predstavlja jednu moguću izvedbu ili logičku putanju UC-a, odnosno definira što se događa sa sustavom pod određenim uvjetima.;
6;Nacrtati primjer upotrebe <> i <> odnosa između elemenata Use Case dijagrama te obrazložiti zašto su elementi baš u tom odnosu.;Na slici je prikazan primjer sustava bankomata koji korisniku (eng. customer) nudi opciju podizanja gotovine (eng. withdraw cash) i podizanja gotovine sa zaštitom odlaska u minus (eng. protect overdraft). Kod odabira opcije podizanja gotovine automatski se pokreće prikaz ažuriranja stanja na računu (eng. update account), a kod opcije podizanja gotovine sa zaštitom postavlja se pitanje želi li se aktivirati zaštita i ako je odgovor potvrdan, pokreće se odgovarajući prikaz. Oznaka <> se koristi kada jedan UC sigurno koristi drugi UC u obavljanju svog zadatka. U ovom primjeru „Withdraw Cast“ sigurno poziva „Update Account“. Oznaka <> se koristi kada jedan UC može trebati pomoć drugog UC-a u izvođenju svog zadatka. To znači da u kodu UC-a koji treba pomoć postoji proširenje, odnosno uvjetno grananje kojim se omogućuje pozivanje drugog UC-a. U ovom primjeru „Protect Overdraft“ je opcija koja može i ne mora biti pozvana kao zaseban UC nakon odabira „Withdraw Cash with Overdraft Protection“.;
6;Nabroji i opiši sastavne elemente Use Case dijagrama?;Sastavni elementi Use Case dijagrama su: sustav, korisnik, korisnički slučaj te veze: pridruživanje, zavisnost unutar sustava koja može biti uključivanje ili proširivanje te generalizacija. Sustav se označava pravokutnikom, a važno je definirati koliko funkcionalnosti sadrži, kako međudjeluje sa okolnim sustavima, te tko su korisnici sustava. Korisnik je predstavljen grafikom čovječuljka za ljude ili pravokutnikom za druge sustave i uređaje koji imaju interakciju sa sustavom. Korisnički slučaj je označen elipsom unutar sustava te definira zahtijevano ponašanje sustava, odnosno svojstva koja su vidljiva korisnicima. Veze označene strelicama određuju komunikaciju korisnika sa sustavom (pridruživanje). Veze označene isprekidanom linijom označavaju odnos unutar sustava, odnosno korisničkih slučaja. Veza odnosa označena sa <> označava kada jedan korisnički slučaj koristi drugi korisnički slučaj u izvođenju svoga zadatka, a označena sa <> označava kada jedan korisnički slučaj koristi drugi korisnički slučaj u izvođenju svoga zadatka uz određeni uvjet. Veze označene punom linijom i praznim trokutićem definiraju generalizaciju korisničkih slučajeva kod kojeg jedan korisnički slučaj predstavlja općenitiju verziju drugoga, odnosno sadrži sva svojstva i ima potpuni pristup drugom korisničkom slučaju.;
6;Za što se koristi te koji su osnovni elementi dijagrama aktivnosti (eng. activity diagram)? ;Dijagram aktivnosti prikazuje funkcionalnost programskog sustava iz perspektive unutrašnjosti sustava. Sastavni elementi su mu: početno i krajnje stanje (označeni krugovima), aktivnosti (pravokutnikom) koje mogu biti slijedne ili paralelne, prijelazi između aktivnosti, odnosno tok aktivnosti (strelicom), račvanje i skupljanje paralelnih aktivnosti (podebljanom linijom), uvjetno grananje (rombom) te signali kada neka aktivnost šalje ili prima neku poruku (zastavicom).;
6;Koja je osnovna razlika između scenarija i dijagrama aktivnosti?;Dijagram aktivnosti prikazuje sve moguće sekvence odjednom, a scenarij je samo jedna moguća putanja/izvedba dijagrama aktivnosti.;
6;Koja je glavna prednost potpuno automatskih sustava za ispravljanje grešaka u programskom kodu?;Glavna prednost potpuno automatskih sustava je njihova brzina i smanjena potreba za ljudskim resursima, jer cijeli proces – od detekcije greške do generiranja popravka – odvija se bez intervencije programera, koristeći samo testove kao ulaz. ;
6;Koje vrste grešaka APR alati poput SemFix i SapFix mogu automatski ispraviti, i kako to čine?;"APR alati poput SemFix i SapFix mogu automatski ispraviti sintaktičke greške, kao što su izostavljene zagrade, zarezi ili pogrešno napisana imena varijabli. Oni koriste statičku analizu koda kako bi prepoznali nedostatke i umetnuli nedostajuće elemente, 
poput vitičaste zagrade u C++ funkciji.";
6;Koji su neki problemi kod automatskog ispravljanja programa? ;Ponekad popravci nisu točni, program može raditi krivo nakon ispravka ili sustav ne može prepoznati sve greške.;

